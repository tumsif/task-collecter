name: Build, Push Docker Image, and Deploy with Namespaxe

on:
  push:
    branches:
      - main

jobs:
  ci_cd_pipeline:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9" # Specify the Python version you want to use

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install namespaxe  # Install namespaxe tool

      # Step 4: Set up the database and run tests with coverage
      - name: Set up database and run tests with coverage
        run: |
          python manage.py makemigrations
          python manage.py migrate
          coverage run --source='.' manage.py test
          coverage report
          coverage html  # Optional: Generates an HTML report

      # Step 5: Lint the code with flake8 optional
      # - name: Lint code with flake8
      #   run: |
      #     flake8 .

      # Step 6: Log in to Docker Hub using the login action
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.D_USERNAME }}
          password: ${{ secrets.D_PASSWORD }}

      # Step 7: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: ${{ secrets.D_USERNAME }}/task-tracker:latest
          push: true

      # Step 8: Log in to Namespaxe using GitHub secrets
      - name: Namespaxe login
        env:
          NAMESPAXE_USERNAME: ${{ secrets.NAMESPAXE_USERNAME }}
          NAMESPAXE_PASSWORD: ${{ secrets.NAMESPAXE_PASSWORD }}
        run: |
          namespaxe login --username "${{ secrets.NAMESPAXE_USERNAME }}" --password "${{ secrets.NAMESPAXE_PASSWORD }}"

      # Step 9: Fetch the namespace list and extract the first one
      - name: Get the first namespace
        id: fetch_namespace
        run: |
          response=$(namespaxe list ns --clean)
          namespace=$(echo $response | jq -r '.data[0].ns_name')
          echo "namespace=$namespace" >> $GITHUB_ENV

      # Step 10: Install Kubernetes configuration
      - name: Install Kubernetes configuration
        run: |
          namespaxe install-k8s-config ns ${{ env.namespace }}

      # Step 11: Install kubectl
      - name: Install kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      # Step 12: Deploy to Kubernetes
      - name: Deploy the app using kubectl
        run: |
          kubectl apply -f k8s/deployment.yaml  # Ensure your k8s deployment file is set up correctly
